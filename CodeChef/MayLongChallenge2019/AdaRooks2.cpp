#include<bits/stdc++.h>
#define iint int
#define pll std::pair<iint,iint>
#define rep(i,a,b) for(iint i=(iint)a;i<(iint)b;i++)
#define per(i,a,b) for(iint i=(iint)a;i>(iint)b;i--)
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define full(a) a.begin(),a.end()
#define rfull(a) a.rbegin(),a.rend()

using namespace std;
const double pi=acos(-1.0);
const double pii=2*pi;
const double eps=1e-6;
const double MOD=1e9+7;

int main(){
	std::ios::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);
	// int arr[] = {};

	int t;
	std::cin >> t;
	std::cout<<t<<std::endl;
	srand(1);
	while(t--){
		// int n;
		// std::cin >> n;
		// std::vector<std::vector<bool>> grid(n,std::vector<bool>(n,false));
		// std::vector<int> eight_ind(16,0), tot_pr(120,0);
		// std::unordered_set<int> tmp;
		// rep(i,0,n){
		// 	std::cout<<"Doing "<< i << std::endl;
		// 	bool flag = true;
		// 	while(flag){
		// 		flag = true;
		// 		rep(j,0,16){
		// 			eight_ind[j] = rand()%n; //((rand()%n+1)+(rand()%n+2)+(rand()%n+3)+(rand()%n+4))%n; 
		// 		}

		// 		for(int x=0,k=0;x<16;x++){
		// 			for(int y=x+1;y<16;y++){
		// 				tot_pr[k++] = (eight_ind[x] < eight_ind[y]) ? eight_ind[x]*n + eight_ind[y] : eight_ind[y]*n + eight_ind[x] ;
		// 				if(eight_ind[x] == eight_ind[y]){
		// 					flag = false;
		// 				}
		// 			}
		// 		}

		// 		int ctr=0;
		// 		rep(j,0,120){
		// 			if(tmp.find(tot_pr[j]) == tmp.end()){
		// 				ctr++;
		// 			}
		// 		}

		// 		if(ctr == 120 && flag){
		// 			flag = false;
		// 			rep(j,0,120){
		// 				tmp.insert(tot_pr[j]);
		// 			}
		// 			rep(j,0,16){
		// 				grid[i][eight_ind[j]] = true;
		// 			}
		// 		}
		// 		else{
		// 			flag = true;
		// 		}
		// 	}
		// }

		int n;
		std::cin >> n;
		std::vector<std::vector<bool>> grid(n,std::vector<bool>(n,false)), tmp(n,std::vector<bool>(n,true));
		for (int i=0;i<n;i++){
			tmp[i][i]=false;
		}
		
		std::vector<int> eight_ind(10,0);
		rep(i,0,n){
			std::cout<<"Doing "<<i<< std::endl;
			for(int j=0;j<10;j++){
				bool flag = true;
				while(flag){
					eight_ind[j]=(rand()%n);
					bool tmp_flag=true,tmp_flag2=true;
					for(int x=0;x<j;x++){
						tmp_flag = (tmp_flag&&tmp[eight_ind[j]][eight_ind[x]]);
						tmp_flag2 = ((eight_ind[x] != eight_ind[j])&&tmp_flag2);
					}
					flag = !(tmp_flag2&&tmp_flag);
				}
			}

			for(int x=0;x<10;x++){
				for(int y=x+1;y<10;y++){
					tmp[eight_ind[x]][eight_ind[y]] = false;
					tmp[eight_ind[y]][eight_ind[x]] = false;
				}
			}

			for(int j=0;j<10;j++){
				grid[i][eight_ind[j]]=true;
			}
		}

		std::cout << std::endl << n << std::endl;
		rep(x,0,n){
			rep(y,0,n){
				std::cout << (grid[x][y] ? '1' : '0') << " ";
			}
			std::cout<<std::endl;
		}
	}
	return 0;
}